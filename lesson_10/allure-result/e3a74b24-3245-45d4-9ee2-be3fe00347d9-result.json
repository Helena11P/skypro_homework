{"name": "Интернет-магазин", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=130.0.6723.117)\nStacktrace:\n\tGetHandleVerifier [0x00FAEBD3+24307]\n\t(No symbol) [0x00F38D74]\n\t(No symbol) [0x00E1C323]\n\t(No symbol) [0x00DFE00B]\n\t(No symbol) [0x00E85F6F]\n\t(No symbol) [0x00E98EC9]\n\t(No symbol) [0x00E7FC26]\n\t(No symbol) [0x00E5219C]\n\t(No symbol) [0x00E5311D]\n\tGetHandleVerifier [0x01258D93+2818227]\n\tGetHandleVerifier [0x012B542E+3196750]\n\tGetHandleVerifier [0x012AD9D2+3165426]\n\tGetHandleVerifier [0x0104DA70+675216]\n\t(No symbol) [0x00F41B3D]\n\t(No symbol) [0x00F3EA18]\n\t(No symbol) [0x00F3EBB5]\n\t(No symbol) [0x00F31640]\n\tBaseThreadInitThunk [0x75357BA9+25]\n\tRtlInitializeExceptionChain [0x7759C0CB+107]\n\tRtlClearBits [0x7759C04F+191]", "trace": "@allure.title(\"Интернет-магазин\")\n    @allure.description(\"Тестирует интернет-магазин: авторизацию, добавление товаров в корзину, заполнение формы доставки\")\n    @allure.feature(\"BUY\")\n    @allure.severity(\"blocker\")\n    def test_shop():\n        driver = webdriver.Chrome(\n            service=ChromeService(ChromeDriverManager().install()))\n    \n>       authorization = Authorization(driver)\n\nshop\\shop_test.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nshop\\pages\\AuthorizationPage.py:14: in __init__\n    self.driver.maximize_window()\nC:\\Users\\helen\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:506: in maximize_window\n    self.execute(command, None)\nC:\\Users\\helen\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002484EE12DE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75357BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7759C0CB+107]\\\\n\\\\tRtlClearBits [0x7759C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=130.0.6723.117)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FAEBD3+24307]\nE       \t(No symbol) [0x00F38D74]\nE       \t(No symbol) [0x00E1C323]\nE       \t(No symbol) [0x00DFE00B]\nE       \t(No symbol) [0x00E85F6F]\nE       \t(No symbol) [0x00E98EC9]\nE       \t(No symbol) [0x00E7FC26]\nE       \t(No symbol) [0x00E5219C]\nE       \t(No symbol) [0x00E5311D]\nE       \tGetHandleVerifier [0x01258D93+2818227]\nE       \tGetHandleVerifier [0x012B542E+3196750]\nE       \tGetHandleVerifier [0x012AD9D2+3165426]\nE       \tGetHandleVerifier [0x0104DA70+675216]\nE       \t(No symbol) [0x00F41B3D]\nE       \t(No symbol) [0x00F3EA18]\nE       \t(No symbol) [0x00F3EBB5]\nE       \t(No symbol) [0x00F31640]\nE       \tBaseThreadInitThunk [0x75357BA9+25]\nE       \tRtlInitializeExceptionChain [0x7759C0CB+107]\nE       \tRtlClearBits [0x7759C04F+191]\n\nC:\\Users\\helen\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Тестирует интернет-магазин: авторизацию, добавление товаров в корзину, заполнение формы доставки", "start": 1731248095629, "stop": 1731248099388, "uuid": "c3d81486-9b6b-4529-ad75-ee78dea2b040", "historyId": "b862b2b3f8dab1e624c38cd7ea41f783", "testCaseId": "b862b2b3f8dab1e624c38cd7ea41f783", "fullName": "shop.shop_test#test_shop", "labels": [{"name": "severity", "value": "blocker"}, {"name": "feature", "value": "BUY"}, {"name": "parentSuite", "value": "shop"}, {"name": "suite", "value": "shop_test"}, {"name": "host", "value": "DESKTOP-E40VPGR"}, {"name": "thread", "value": "18328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "shop.shop_test"}]}